"use strict";


var constants = {
	ROOM_ENERGY_NO_REPAIRERS: 10000,
	ROOM_ENERGY_ONE_REPAIRER: 30000,
	ROOM_ENERGY_NO_BUILDERS_RCL4: 5000,
	ROOM_ENERGY_NO_BUILDERS: 40000,
	ROOM_ENERGY_STORE_PER_BUILDER: 40000,
	ROOM_ENERGY_NO_UPGRADERS: 100000,
	ROOM_ENERGY_NO_UPGRADERS_RCL7: 120000,
	ROOM_ENERGY_ONE_UPGRADER: 150000,
	ROOM_ENERGY_ONE_UPGRADER_RCL7: 240000,
	ROOM_ENERGY_NO_PIONEERS: 40000,
	ROOM_ENERGY_NO_MINERS: 70000,
	get ROOM_ENERGY_NO_SOLO_MINERS() {
		return Memory.season ? 70000 : 175000
	},
	ROOM_ENERGY_NO_TRANSPORTERS: 60000,
	ROOM_ENERGY_NO_CHILD_ROOM_CREEPS: 50000,
	ROOM_ENERGY_NO_TERMINAL_SEND: 90000,
	ROOM_ENERGY_NO_TERMINAL_RECEIVE: 900000,

	ROOM_ENERGY_NO_REMOTE_SPAWN: 75000,

	ROOM_ENERGY_CHEAP_UPGRADERS: 40000,
	ROOM_ENERGY_NO_P2_REPAIRERS: 50000,
	ROOM_ENERGY_NO_P1_REPAIRERS: 40000,
	ROOM_ENERGY_LOCAL_LIMIT_REPAIRERS_TO_ONE: 10000,
	ROOM_ENERGY_LIMIT_REPAIRERS_TO_ONE: 20000,
	ROOM_ENERGY_LIMIT_BASE_MANAGERS_TO_ONE: 30000,

	ROOM_ENERGY_NO_DEBARRING: 130000,
	ROOM_ENERGY_NO_PRODUCING: 110000,
	ROOM_ENERGY_NO_PRODUCING_POWERED: 10000,
	ROOM_ENERGY_NO_BARRING: 120000,

	ROOM_ENERGY_RESTRICT_OFFENSIVE_HIGH_P: 75000,
	ROOM_ENERGY_RESTRICT_OFFENSIVE: 110000,
	ROOM_ENERGY_RESTRICT_OFFENSIVE_LOW_P: 175000,
	ROOM_ENERGY_RESTRICT_OFFENSIVE_RENEW: 30000,

	ROOM_ENERGY_NO_RESTRICT: 400000,

	ROOM_ENERGY_BUY: 25000,
	ROOM_ENERGY_CONVERT_FROM_BATTERIES: 150000,
	ROOM_ENERGY_CONVERT_FROM_BATTERIES_MANY_BATTERIES: 300000,
	ROOM_ENERGY_CONVERT_TO_BATTERIES_RESERVE: 200000,
	ROOM_ENERGY_MAX_BUY: 300000,

	SEASON_GPL_TARGET: 16,

	get ROOM_ENERGY_UPGRADE_RCL_8() {
		// return Game.gcl.level >= 8 && Game.gpl.level < this.SEASON_GPL_TARGET && Memory.season ? 425000 / (Memory.boomMode ? 0.8 : 1) : (Game.gcl.level >= (Memory.gclCPULimit || 28) && Memory.stats.avgBucket < 9500) ? 275000 : (Memory.boomMode ? 125000 : 250000)
		return (Game.gcl.level >= (Memory.gclCPULimit || 28) && Memory.stats.avgBucket < 9500) ? Memory.season4 ? 500000 : 275000 : (Memory.boomMode ? 125000 : 250000)
	},
	get ROOM_ENERGY_PROCESS_POWER() {
		// return Memory.season3 || Memory.season4 ? 50000 : (Game.gcl.level >= (Memory.gclCPULimit || 28) && Memory.stats.avgBucket < 9500) ? (Memory.totalWealth > 1e9 ? 100000 : 250000) : ((((!Memory.boomMode || Memory.powerBoom) && Game.gpl.level < 20) || Game.gpl.level < 9) ? (Game.gpl.level < 9 ? (Game.gpl.level < 3 ? 50000 : 100000) : 200000) : 275000)
		return Memory.season3 ? 50000 : 
			   Memory.season4 ? 200000 : 
			   Memory.season5 ? 100000 :
			   (Game.gcl.level >= (Memory.gclCPULimit || 28) && Memory.stats.avgBucket < 9500) ? (Memory.totalWealth > 1e9 ? 100000 : 250000) : 
			   ((((!Memory.boomMode || Memory.powerBoom) && Game.gpl.level < 20) || Game.gpl.level < 9) ? (Game.gpl.level < 9 ? (Game.gpl.level < 3 ? 50000 : 100000) : 200000) : 275000)
	},
	ROOM_ENERGY_MAX_RESTRICT_UPGRADERS: 300000,
	ROOM_ENERGY_CONVERT_TO_BATTERIES: 350000,
	ROOM_ENERGY_CONVERT_TO_BATTERIES_2: 650000,
	ROOM_ENERGY_SELL_TO_MARKET: 400000,
	ROOM_ENERGY_ENERGY_INTO_WALLS: 450000,
	ROOM_ENERGY_ENERGY_INTO_WALLS_2: 500000,
	ROOM_ENERGY_ENERGY_INTO_WALLS_3: 550000,
	ROOM_ENERGY_SELL_TO_MARKET_2: 600000,

	BATTERY_RESERVE_SIZE: 5000,

	// MIN_AMOUNT_BEFORE_PRODUCE: 9000,
	MIN_BAR_AMOUNT: 1000,

	MAX_AMOUNT_BEFORE_DEBAR: 15000, // Don't turn from Bar->Resource if we have over this resource amount
	MIN_AMOUNT_BEFORE_BAR: 25000, // Don't turn from Resource->Bar if we have under this resource amount
	MIN_AMOUNT_BEFORE_BAR_MISSING: 20000, // Don't turn from Resource->Bar if we have under this resource amount... lower threshold as we're missing something for commodities

	MARKET_SELL_RESOURCE_AMOUNT: 30000,
	MARKET_SELL_RESOURCE_AMOUNT_BAR: 10000,
	MARKET_SELL_RESOURCE_AMOUNT_BOOST_T3: 45000,
	MARKET_SELL_RESOURCE_AMOUNT_BOOST: 15000,

	MARKET_SELL_ENERGY_CREDIT_MAX: 200000,
	MARKET_SELL_ENERGY_MINERAL_RATIO: 0.2,

	MARKET_INTERSHARD_BUY_TO_MOVE: 20000,

	MARKET_STORED_ENERGY_THRESHOLD: 250000,

	DEPOSIT_STATS_ALPHA: Math.exp(-(1 / 20000.)),

	FACTORY_STATS_ALPHA: Math.exp(-(1/10000.)),

	get MAX_DEPOSIT_RANGE() {
		return Memory.season4 ? 9 : Memory.botArena ? 4 : 7
	},
	get MAX_POWER_RANGE() {
		return Memory.season3 ? 7 : (Memory.botArena ? 5 : 7)
	},
	get MAX_LOOT_RANGE() {
		return Memory.botArena && !Memory.season ? 6 : 12
	},

	// MAX_SEASON_SCORE_RANGE_HAULER: 10,
	// MAX_SEASON_SCORE_RANGE_SPAWN: 6,

	get MAX_SEASON_SCORE_RANGE_HAULER() {
		// Hokay, not a constant
		let base = 10

		if (Game.cpu.bucket < 2000) {
			base -= 2
		}
		else if (Game.cpu.bucket < 3000) {
			base -= 1
		}

		if (Memory.IveWonAlready) {
			base -= 3
		}

		return Math.max(0, base)
	},
	get MAX_SEASON_SCORE_RANGE_SPAWN() {
		// Hokay, not a constant
		// Was 6 for season 1 end
		let base = 10

		if (Game.cpu.bucket < 2000) {
			base -= 2
		}
		else if (Game.cpu.bucket < 3000) {
			base -= 1
		}

		if (Memory.maxRoomLevel < 8) {
			base -= 2;
		}


		let seasonFetcherCPU = (Memory.stats.creepCPUs["seasonFetcher"] || 0) / Memory.stats.ticks

		if (seasonFetcherCPU > Game.cpu.limit * 0.3) {
			base -= 2.5;
		}
		else if (seasonFetcherCPU > Game.cpu.limit * 0.25) {
			base -= 2;
		}
		else if (seasonFetcherCPU > Game.cpu.limit * 0.2) {
			base -= 1.5;
		}
		else if (seasonFetcherCPU > Game.cpu.limit * 0.15) {
			base -= 1;
		}
		else if (seasonFetcherCPU > Game.cpu.limit * 0.1) {
			base -= 0.5;
		}

		if (Memory.IveWonAlready) {
			base -= 2
		}

		if (Game.cpu.bucket < 3000 || Memory.stats.avgBucket < 3000) {
			base *= Math.min(Game.cpu.bucket, Memory.stats.avgBucket) / 3000
		}


		return Math.max(0, base)
	},

	get MAX_SEASON_SCORE_RANGE() {
		return Memory.anySeasonDropOffAvailable ? this.MAX_SEASON_SCORE_RANGE_HAULER : 2.5
	},

	get SEASON_TARGET_GCL() {
		return Memory.terminalNetworkFreeEnergy > 2e6 ? 11 : 10
	},

	SEASON2_MAX_X_HOARD: 0,



	ROOM_COMBAT_STRATEGY_HYPER_AGGRESSIVE : 1,
	ROOM_COMBAT_STRATEGY_AGGRESSIVE : 2,
	ROOM_COMBAT_STRATEGY_QUITE_AGGRESSIVE : 3,
	ROOM_COMBAT_STRATEGY_DEFAULT : 4,
	ROOM_COMBAT_STRATEGY_QUITE_COWARDLY : 5,
	ROOM_COMBAT_STRATEGY_COWARDLY : 6,
	ROOM_COMBAT_STRATEGY_SUPER_COWARDLY : 7,

	// Skew toward default.
	ROOM_COMBAT_STRATEGIES : [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 6, 6, 7],

	REMOTE_DEFENSE_BUILD_STRATEGY_RANGED : 1,
	REMOTE_DEFENSE_BUILD_STRATEGY_COUNTER_RANGED : 2,
	REMOTE_DEFENSE_BUILD_STRATEGY_COUNTER : 3,
	REMOTE_DEFENSE_BUILD_STRATEGY_COUNTER_ATTACK: 4,
	REMOTE_DEFENSE_BUILD_STRATEGY_ATTACK: 5,

	REMOTE_DEFENSE_BUILD_STRATEGY_DEFAULT: 3,

	COMBAT_STRATEGY_DEFAULT: 304,

	REMOTE_DEFENSE_BUILD_STRATEGIES : [1, 2, 2, 3, 3, 3, 4, 4, 5],




	TOWER_STRATEGY_DAMAGE_TRACKING_HYPER_PROTECTIVE : 1,
	TOWER_STRATEGY_DAMAGE_TRACKING_PROTECTIVE : 2,
	TOWER_STRATEGY_DAMAGE_TRACKING : 3,
	TOWER_STRATEGY_DAMAGE_TRACKING_AGGRESSIVE : 4,
	TOWER_STRATEGY_DAMAGE_TRACKING_HYPER_AGGRESSIVE : 5,
	TOWER_STRATEGY_RANDOM : 6,
	TOWER_STRATEGY_CLOSEST : 7,
	TOWER_STRATEGY_HEAL_TRACKING : 8,
	TOWER_STRATEGY_MAX_DAMAGE : 9,
	TOWER_STRATEGY_RANDOM_CLOSEST : 10,
	TOWER_STRATEGY_RANDOM_HEAL_TRACKING : 11,
	TOWER_STRATEGY_RANDOM_MAX_DAMAGE : 12,
	TOWER_STRATEGY_SLEEP : 13,

	// Skew toward default.
	TOWER_STRATEGIES : [1, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 5, 6, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 10, 11, 12],
	TOWER_STRATEGIES_LOW_E : [1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 4, 4, 5, 6, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 10, 11, 12, 13, 13, 13, 13, 13, 13, 13, 13],
	TOWER_STRATEGIES_BOOSTED : [2, 3, 3, 4, 6, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 11, 11],
	TOWER_STRATEGIES_LOW_E_BOOSTED : [8],


	// Combat stuff
	MASK_SHAPE_2x2 : 0,
	MASK_SHAPE_TT : 1,
	MASK_SHAPE_TR : 2,
	MASK_SHAPE_TB : 3,
	MASK_SHAPE_TL : 4,
	MASK_SHAPE_X : 5,

	// Nukes
	CLUSTER_NUKE_NUM_FAILS_CHECK : 6,

	// SKs
	SK_DANGER_RANGE: 4,

	// Combat stuff
	HARASS_FORGET_TIME: 20000,

	// NEURAL NETWORKS!!!
	NEURAL_NETWORK_PAIRED_ATTACKERS : 0,
	NEURAL_NETWORK_PAIRED_ATTACKERS_LEARNING_RATE : 0.005,

	// Newbie zones
	FIRST_OBSERVE_TO_OUT_OF_NEWBIE_TIME: 20 * 24 * 3600 * 1000,

	// HATE
	HATE_PER_DPT: 50,
};

global.LAB_ITEMS_ALL = [
	RESOURCE_HYDROGEN,
	RESOURCE_OXYGEN,
	RESOURCE_UTRIUM,
	RESOURCE_KEANIUM,
	RESOURCE_LEMERGIUM,
	RESOURCE_ZYNTHIUM,
	RESOURCE_CATALYST,
	RESOURCE_GHODIUM,

	RESOURCE_HYDROXIDE,
	RESOURCE_ZYNTHIUM_KEANITE,
	RESOURCE_UTRIUM_LEMERGITE,

	RESOURCE_UTRIUM_HYDRIDE,
	RESOURCE_UTRIUM_OXIDE,
	RESOURCE_KEANIUM_HYDRIDE,
	RESOURCE_KEANIUM_OXIDE,
	RESOURCE_LEMERGIUM_HYDRIDE,
	RESOURCE_LEMERGIUM_OXIDE,
	RESOURCE_ZYNTHIUM_HYDRIDE,
	RESOURCE_ZYNTHIUM_OXIDE,
	RESOURCE_GHODIUM_HYDRIDE,
	RESOURCE_GHODIUM_OXIDE,

	RESOURCE_UTRIUM_ACID,
	RESOURCE_UTRIUM_ALKALIDE,
	RESOURCE_KEANIUM_ACID,
	RESOURCE_KEANIUM_ALKALIDE,
	RESOURCE_LEMERGIUM_ACID,
	RESOURCE_LEMERGIUM_ALKALIDE,
	RESOURCE_ZYNTHIUM_ACID,
	RESOURCE_ZYNTHIUM_ALKALIDE,
	RESOURCE_GHODIUM_ACID,
	RESOURCE_GHODIUM_ALKALIDE,

	RESOURCE_CATALYZED_UTRIUM_ACID,
	RESOURCE_CATALYZED_UTRIUM_ALKALIDE,
	RESOURCE_CATALYZED_KEANIUM_ACID,
	RESOURCE_CATALYZED_KEANIUM_ALKALIDE,
	RESOURCE_CATALYZED_LEMERGIUM_ACID,
	RESOURCE_CATALYZED_LEMERGIUM_ALKALIDE,
	RESOURCE_CATALYZED_ZYNTHIUM_ACID,
	RESOURCE_CATALYZED_ZYNTHIUM_ALKALIDE,
	RESOURCE_CATALYZED_GHODIUM_ACID,
	RESOURCE_CATALYZED_GHODIUM_ALKALIDE
]


// Order independent. Ordered version is in labs.
global.targetMinerals = [
	RESOURCE_HYDROGEN,
	RESOURCE_OXYGEN,
	RESOURCE_UTRIUM,
	RESOURCE_KEANIUM,
	RESOURCE_LEMERGIUM,
	RESOURCE_ZYNTHIUM,
	RESOURCE_CATALYST,

	RESOURCE_UTRIUM_HYDRIDE, // Attack.
	RESOURCE_LEMERGIUM_OXIDE, // HEAL
	RESOURCE_KEANIUM_OXIDE, // RA
	RESOURCE_LEMERGIUM_HYDRIDE, // Repair

	RESOURCE_HYDROXIDE,
	RESOURCE_UTRIUM_ACID, // Attack
	RESOURCE_CATALYZED_UTRIUM_ACID,  // Attack.

	RESOURCE_LEMERGIUM_ALKALIDE, // HEAL
	RESOURCE_KEANIUM_ALKALIDE, // RA

	RESOURCE_CATALYZED_LEMERGIUM_ALKALIDE, // Heal
	RESOURCE_CATALYZED_KEANIUM_ALKALIDE, // RA
	RESOURCE_CATALYZED_ZYNTHIUM_ALKALIDE, // Move
	RESOURCE_CATALYZED_GHODIUM_ALKALIDE, // Tough



	RESOURCE_GHODIUM,
	RESOURCE_ZYNTHIUM_KEANITE,
	RESOURCE_UTRIUM_LEMERGITE,

	RESOURCE_ZYNTHIUM_ACID,
	RESOURCE_ZYNTHIUM_HYDRIDE, // Dismantle
	RESOURCE_CATALYZED_ZYNTHIUM_ACID, // Dismantle

	RESOURCE_LEMERGIUM_ACID, // Repair.
	RESOURCE_CATALYZED_LEMERGIUM_ACID,  // Repair.

	// RESOURCE_GHODIUM_HYDRIDE, // Upgrade.
	// RESOURCE_GHODIUM_ACID, // Upgrade.
	// RESOURCE_CATALYZED_GHODIUM_ACID, // Upgrade.

	RESOURCE_ZYNTHIUM_ALKALIDE,
	RESOURCE_ZYNTHIUM_OXIDE, // Move

	RESOURCE_GHODIUM_ALKALIDE,
	RESOURCE_GHODIUM_OXIDE,

	RESOURCE_OPS
];

global.balancableBars = [
	RESOURCE_UTRIUM_BAR,
	RESOURCE_LEMERGIUM_BAR,
	RESOURCE_ZYNTHIUM_BAR,
	RESOURCE_KEANIUM_BAR,
	RESOURCE_GHODIUM_MELT,
	RESOURCE_OXIDANT,
	RESOURCE_REDUCTANT,
	RESOURCE_PURIFIER
];

global.balancableMinerals = global.targetMinerals.concat(global.balancableBars)

global.saleMinerals = [
	// RESOURCE_LEMERGIUM_ACID, // Repair.
	// RESOURCE_CATALYZED_LEMERGIUM_ACID,  // Repair.

	RESOURCE_GHODIUM_HYDRIDE, // Upgrade.
	RESOURCE_GHODIUM_ACID, // Upgrade.
	RESOURCE_CATALYZED_GHODIUM_ACID, // Upgrade.
];


Object.defineProperty(global, 'RECIPES', {
	get: function() {
		if (!global._recipes) {
			global._recipes = {};
			Object.keys(REACTIONS).forEach(a => {
				Object.keys(REACTIONS[a]).forEach(b => {
					global._recipes[REACTIONS[a][b]] = [a,b];
				});
			});
		}
		return global._recipes;
	},
	configurable: true,
	enumerable: false
});

module.exports = constants;